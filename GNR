local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "Grow N' Roll!",
   Icon = "shield-check", -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
   LoadingTitle = "Loading...",
   LoadingSubtitle = "Grow N' Roll!",
   Theme = "Default", -- Check https://docs.sirius.menu/rayfield/configuration/themes

   ToggleUIKeybind = "L", -- The keybind to toggle the UI visibility (string like "K" or Enum.KeyCode)

   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface

   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "Grow-N-Roll"
   },

   Discord = {
      Enabled = false, -- Prompt the user to join your Discord server if their executor supports it
      Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },

   KeySystem = false, -- Set this to true to use our key system
   KeySettings = {
      Title = "Untitled",
      Subtitle = "Key System",
      Note = "No method of obtaining the key is provided", -- Use this to tell the user how to get a key
      FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})


local diceMerchant = {
  ["Lucky Dice"] = "Lucky Dice",
  ["Flaming Dice"] = "Flaming Dice",
  ["Glitch Dice"] = "Glitch Dice",
}
local selectedDiceValue = nil
local isBuyingMerchant = false


local Tab = Window:CreateTab("Main", "home") -- Title, Image

local Toggle = Tab:CreateToggle({
   Name = "Auto Roll",
   CurrentValue = false,
   Flag = "AutoRoll", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
     getgenv().autoRoll = Value
     if Value then
       task.spawn(function()
         while getgenv().autoRoll do
           game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Events"):WaitForChild("BuyEgg"):FireServer("RNG Egg", "Single")
           task.wait()
         end
       end)
     end
   end
})

local Toggle = Tab:CreateToggle({
   Name = "Auto Fish",
   CurrentValue = false,
   Flag = "AutoFish", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
     getgenv().autoFish = Value
     if Value then
       task.spawn(function()
         while getgenv().autoFish do
           game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Functions"):WaitForChild("FishHandler"):InvokeServer(true, false)
           task.spawn()
         end
       end)
     end
   end
})

-- DICE MERCHANT DROPDOWN

local Dropdown = Tab:CreateDropdown({
   Name = "Select Dice..",
   Options = {"Lucky Dice","Flaming Dice", "Glitch Dice"},
   CurrentOption = {"None"},
   MultipleOptions = true,
   Flag = "DiceDropdown", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Options)
     local selectedDiceValue = diceMerchant
     print("Selected:".. selectedDiceValue)
   end
})

local Toggle = Tab:CreateToggle({
   Name = "Enable Auto Purchase",
   CurrentValue = false,
   Flag = "AutoPurchase", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
     isBuyingMerchant = Value
     while isBuyingMerchant do
       if isBuyingMerchant then
         game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Events"):WaitForChild("MerchantEvents"):WaitForChild("BuyItem"):FireServer("Merchant", selectedDiceValue, 1)
         task.wait()
       end
     end
   end
})
